// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	adventurers "tasquest.com/server/application/gamification/adventurers"
	commons "tasquest.com/server/commons"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AdventurerFinder is an autogenerated mock type for the AdventurerFinder type
type AdventurerFinder struct {
	mock.Mock
}

// FindAllByFilter provides a mock function with given fields: filter
func (_m *AdventurerFinder) FindAllByFilter(filter commons.SqlFilter) ([]adventurers.Adventurer, error) {
	ret := _m.Called(filter)

	var r0 []adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(commons.SqlFilter) []adventurers.Adventurer); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]adventurers.Adventurer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(commons.SqlFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *AdventurerFinder) FindByID(id uuid.UUID) (adventurers.Adventurer, error) {
	ret := _m.Called(id)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(uuid.UUID) adventurers.Adventurer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUser provides a mock function with given fields: userID
func (_m *AdventurerFinder) FindByUser(userID uuid.UUID) (adventurers.Adventurer, error) {
	ret := _m.Called(userID)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(uuid.UUID) adventurers.Adventurer); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByFilter provides a mock function with given fields: filter
func (_m *AdventurerFinder) FindOneByFilter(filter commons.SqlFilter) (adventurers.Adventurer, error) {
	ret := _m.Called(filter)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(commons.SqlFilter) adventurers.Adventurer); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(commons.SqlFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
