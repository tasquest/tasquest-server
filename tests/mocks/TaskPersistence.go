// Code generated by mockery 2.7.4. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	tasks "tasquest.com/server/application/gamification/tasks"
)

// TaskPersistence is an autogenerated mock type for the TaskPersistence type
type TaskPersistence struct {
	mock.Mock
}

// Delete provides a mock function with given fields: task
func (_m *TaskPersistence) Delete(task tasks.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(tasks.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: id
func (_m *TaskPersistence) DeleteByID(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: task
func (_m *TaskPersistence) Save(task tasks.Task) (tasks.Task, error) {
	ret := _m.Called(task)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(tasks.Task) tasks.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tasks.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: task
func (_m *TaskPersistence) Update(task tasks.Task) (tasks.Task, error) {
	ret := _m.Called(task)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(tasks.Task) tasks.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tasks.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
