// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	tasks "tasquest.com/server/gamification/tasks"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: task
func (_m *TaskRepository) Delete(task tasks.Task) (tasks.Task, error) {
	ret := _m.Called(task)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(tasks.Task) tasks.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tasks.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: id
func (_m *TaskRepository) DeleteByID(id string) (tasks.Task, error) {
	ret := _m.Called(id)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(string) tasks.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByFilter provides a mock function with given fields: filter
func (_m *TaskRepository) FindByFilter(filter primitive.M) (tasks.Task, error) {
	ret := _m.Called(filter)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(primitive.M) tasks.Task); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *TaskRepository) FindByID(id string) (tasks.Task, error) {
	ret := _m.Called(id)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(string) tasks.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: task
func (_m *TaskRepository) Save(task tasks.Task) (tasks.Task, error) {
	ret := _m.Called(task)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(tasks.Task) tasks.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tasks.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: task
func (_m *TaskRepository) Update(task tasks.Task) (tasks.Task, error) {
	ret := _m.Called(task)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(tasks.Task) tasks.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tasks.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
