// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	tasks "tasquest.com/server/gamification/tasks"
)

// TaskManager is an autogenerated mock type for the TaskManager type
type TaskManager struct {
	mock.Mock
}

// AdventurerCompletesTask provides a mock function with given fields: command
func (_m *TaskManager) AdventurerCompletesTask(command tasks.AdventurerCompletedTaskCommand) error {
	ret := _m.Called(command)

	var r0 error
	if rf, ok := ret.Get(0).(func(tasks.AdventurerCompletedTaskCommand) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTask provides a mock function with given fields: command
func (_m *TaskManager) CreateTask(command tasks.CreateTaskCommand) (tasks.Task, error) {
	ret := _m.Called(command)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(tasks.CreateTaskCommand) tasks.Task); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tasks.CreateTaskCommand) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: taskID
func (_m *TaskManager) DeleteTask(taskID string) (tasks.Task, error) {
	ret := _m.Called(taskID)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(string) tasks.Task); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: taskID, command
func (_m *TaskManager) UpdateTask(taskID string, command tasks.UpdateTaskCommand) (tasks.Task, error) {
	ret := _m.Called(taskID, command)

	var r0 tasks.Task
	if rf, ok := ret.Get(0).(func(string, tasks.UpdateTaskCommand) tasks.Task); ok {
		r0 = rf(taskID, command)
	} else {
		r0 = ret.Get(0).(tasks.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tasks.UpdateTaskCommand) error); ok {
		r1 = rf(taskID, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
