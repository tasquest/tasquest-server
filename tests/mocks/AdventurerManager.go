// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	adventurers "tasquest.com/server/gamification/adventurers"
)

// AdventurerManager is an autogenerated mock type for the AdventurerManager type
type AdventurerManager struct {
	mock.Mock
}

// CreateAdventurer provides a mock function with given fields: command
func (_m *AdventurerManager) CreateAdventurer(command adventurers.CreateAdventurer) (adventurers.Adventurer, error) {
	ret := _m.Called(command)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(adventurers.CreateAdventurer) adventurers.Adventurer); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(adventurers.CreateAdventurer) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAdventurerForUser provides a mock function with given fields: userID
func (_m *AdventurerManager) FetchAdventurerForUser(userID string) (adventurers.Adventurer, error) {
	ret := _m.Called(userID)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(string) adventurers.Adventurer); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdventurer provides a mock function with given fields: adventurerID, command
func (_m *AdventurerManager) UpdateAdventurer(adventurerID string, command adventurers.UpdateAdventurer) (adventurers.Adventurer, error) {
	ret := _m.Called(adventurerID, command)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(string, adventurers.UpdateAdventurer) adventurers.Adventurer); ok {
		r0 = rf(adventurerID, command)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, adventurers.UpdateAdventurer) error); ok {
		r1 = rf(adventurerID, command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdventurerExperience provides a mock function with given fields: command
func (_m *AdventurerManager) UpdateAdventurerExperience(command adventurers.UpdateExperience) (adventurers.Adventurer, error) {
	ret := _m.Called(command)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(adventurers.UpdateExperience) adventurers.Adventurer); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(adventurers.UpdateExperience) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
