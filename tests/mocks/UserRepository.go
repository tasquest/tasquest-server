// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	security "tasquest.com/server/security"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindByEmail(email string) (security.User, error) {
	ret := _m.Called(email)

	var r0 security.User
	if rf, ok := ret.Get(0).(func(string) security.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(security.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByFilter provides a mock function with given fields: filter
func (_m *UserRepository) FindByFilter(filter primitive.M) (security.User, error) {
	ret := _m.Called(filter)

	var r0 security.User
	if rf, ok := ret.Get(0).(func(primitive.M) security.User); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(security.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *UserRepository) FindByID(id string) (security.User, error) {
	ret := _m.Called(id)

	var r0 security.User
	if rf, ok := ret.Get(0).(func(string) security.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(security.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: user
func (_m *UserRepository) Save(user security.User) (security.User, error) {
	ret := _m.Called(user)

	var r0 security.User
	if rf, ok := ret.Get(0).(func(security.User) security.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(security.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(security.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
