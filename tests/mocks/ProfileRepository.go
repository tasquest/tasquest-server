// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	"tasquest.com/server/gamification/adventurers"
)

// ProfileRepository is an autogenerated mock type for the ProfileRepository type
type ProfileRepository struct {
	mock.Mock
}

// FindByFilter provides a mock function with given fields: filter
func (_m *ProfileRepository) FindByFilter(filter primitive.M) (adventurers.Adventurer, error) {
	ret := _m.Called(filter)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(primitive.M) adventurers.Adventurer); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.M) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *ProfileRepository) FindByID(id string) (adventurers.Adventurer, error) {
	ret := _m.Called(id)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(string) adventurers.Adventurer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUser provides a mock function with given fields: userID
func (_m *ProfileRepository) FindByUser(userID string) (adventurers.Adventurer, error) {
	ret := _m.Called(userID)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(string) adventurers.Adventurer); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: profile
func (_m *ProfileRepository) Save(profile adventurers.Adventurer) (adventurers.Adventurer, error) {
	ret := _m.Called(profile)

	var r0 adventurers.Adventurer
	if rf, ok := ret.Get(0).(func(adventurers.Adventurer) adventurers.Adventurer); ok {
		r0 = rf(profile)
	} else {
		r0 = ret.Get(0).(adventurers.Adventurer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(adventurers.Adventurer) error); ok {
		r1 = rf(profile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
