// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/mongo"
	"tasquest.com/server/adapters/output/databases/mongorepositories"
	"tasquest.com/server/api"
	"tasquest.com/server/application/gamification/adventurers"
	"tasquest.com/server/application/gamification/tasks"
	"tasquest.com/server/application/security"
	"tasquest.com/server/commons"
	"tasquest.com/server/infra/database"
	"tasquest.com/server/infra/web"
)

// Injectors from init_instances.go:

/**************************
 *    Common Providers    *
 **************************/
func loggerWire() *logrus.Logger {
	logger := commons.ProvideLogger()
	return logger
}

/**************************
 *    Infra Providers     *
 **************************/
func databaseWire() *mongo.Database {
	mongoDatabase := database.ProvideDatasource()
	return mongoDatabase
}

func webServerWire() *gin.Engine {
	engine := web.ProvideWebServer()
	return engine
}

/**************************
 *    security Providers  *
 **************************/
func userFinderWire() security.UserFinder {
	mongoDatabase := databaseWire()
	mongoUserRepository := mongorepositories.NewUserRepository(mongoDatabase)
	return mongoUserRepository
}

func userPersistenceWire() security.UserPersistence {
	mongoDatabase := databaseWire()
	mongoUserRepository := mongorepositories.NewUserRepository(mongoDatabase)
	return mongoUserRepository
}

func userServiceWire() security.UserService {
	userFinder := userFinderWire()
	userPersistence := userPersistenceWire()
	userManagement := security.NewUserManagement(userFinder, userPersistence)
	return userManagement
}

/*****************************
 *    Adventurers Providers  *
 *****************************/
func adventurerFinderWire() adventurers.AdventurerFinder {
	mongoDatabase := databaseWire()
	mongoAdventurerRepository := mongorepositories.NewMongoAdventurerRepository(mongoDatabase)
	return mongoAdventurerRepository
}

func adventurerPersistenceWire() adventurers.AdventurerPersistence {
	mongoDatabase := databaseWire()
	mongoAdventurerRepository := mongorepositories.NewMongoAdventurerRepository(mongoDatabase)
	return mongoAdventurerRepository
}

func adventurerServiceWire() adventurers.AdventurerService {
	adventurerFinder := adventurerFinderWire()
	adventurerPersistence := adventurerPersistenceWire()
	userService := userServiceWire()
	adventurerManager := adventurers.NewAdventurerManager(adventurerFinder, adventurerPersistence, userService)
	return adventurerManager
}

/*****************************
 *      Task Providers       *
 *****************************/
func taskFinderWire() tasks.TaskFinder {
	mongoDatabase := databaseWire()
	mongoTaskRepository := mongorepositories.ProvideMongoTaskRepository(mongoDatabase)
	return mongoTaskRepository
}

func taskPersistenceWire() tasks.TaskPersistence {
	mongoDatabase := databaseWire()
	mongoTaskRepository := mongorepositories.ProvideMongoTaskRepository(mongoDatabase)
	return mongoTaskRepository
}

func taskServiceWire() tasks.TaskService {
	taskFinder := taskFinderWire()
	taskPersistence := taskPersistenceWire()
	adventurerService := adventurerServiceWire()
	taskManager := tasks.NewTaskManager(taskFinder, taskPersistence, adventurerService)
	return taskManager
}

/**************************
 *    Api Providers  *
 **************************/
func authApiWireBuilder() *api.AuthAPI {
	engine := web.ProvideWebServer()
	userService := userServiceWire()
	logger := commons.ProvideLogger()
	errorHandler := commons.ProvideErrorHandler(logger)
	authAPI := api.ProvideAuthAPI(engine, userService, errorHandler)
	return authAPI
}

// init_instances.go:

func Bootstrap() {

	loggerWire()

	databaseWire()
	webServerWire()

	userPersistenceWire()
	userFinderWire()
	userServiceWire()

	adventurerFinderWire()
	adventurerPersistenceWire()
	adventurerServiceWire()

	taskFinderWire()
	taskPersistenceWire()
	taskServiceWire()

	authApiWireBuilder()
}
