// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/mongo"
	"tasquest.com/server"
	"tasquest.com/server/api"
	"tasquest.com/server/gamification/adventurers"
	"tasquest.com/server/gamification/tasks"
	"tasquest.com/server/infra/database"
	"tasquest.com/server/infra/web"
	"tasquest.com/server/security"
)

// Injectors from init_instances.go:

func loggerWireBuilder() *logrus.Logger {
	logger := server.ProvideLogger()
	return logger
}

func databaseWireBuilder() *mongo.Database {
	mongoDatabase := database.ProvideDatasource()
	return mongoDatabase
}

func webServerWireBuilder() *gin.Engine {
	engine := web.ProvideWebServer()
	return engine
}

func userRepositoryWireBuilder() security.UserRepository {
	mongoDatabase := database.ProvideDatasource()
	mongoUserRepository := security.ProvideMongoUserRepository(mongoDatabase)
	return mongoUserRepository
}

func userManagementWireBuilder() security.UserManagement {
	mongoDatabase := database.ProvideDatasource()
	mongoUserRepository := security.ProvideMongoUserRepository(mongoDatabase)
	defaultUserManagement := security.ProvideDefaultUserManagement(mongoUserRepository)
	return defaultUserManagement
}

func adventurerRepositoryWireBuilder() adventurers.AdventurerRepository {
	mongoDatabase := database.ProvideDatasource()
	mongoAdventurerRepository := adventurers.ProvideMongoAdventurerRepository(mongoDatabase)
	return mongoAdventurerRepository
}

func adventurerManagerWireBuilder() adventurers.AdventurerManager {
	mongoDatabase := database.ProvideDatasource()
	mongoAdventurerRepository := adventurers.ProvideMongoAdventurerRepository(mongoDatabase)
	mongoUserRepository := security.ProvideMongoUserRepository(mongoDatabase)
	defaultUserManagement := security.ProvideDefaultUserManagement(mongoUserRepository)
	defaultAdventurerManager := adventurers.ProvideDefaultAdventurerManager(mongoAdventurerRepository, defaultUserManagement)
	return defaultAdventurerManager
}

func taskRepositoryWireBuilder() tasks.TaskRepository {
	mongoDatabase := database.ProvideDatasource()
	mongoTaskRepository := tasks.ProvideMongoTaskRepository(mongoDatabase)
	return mongoTaskRepository
}

func taskManagerWireBuilder() tasks.TaskManager {
	mongoDatabase := database.ProvideDatasource()
	mongoTaskRepository := tasks.ProvideMongoTaskRepository(mongoDatabase)
	mongoAdventurerRepository := adventurers.ProvideMongoAdventurerRepository(mongoDatabase)
	mongoUserRepository := security.ProvideMongoUserRepository(mongoDatabase)
	defaultUserManagement := security.ProvideDefaultUserManagement(mongoUserRepository)
	defaultAdventurerManager := adventurers.ProvideDefaultAdventurerManager(mongoAdventurerRepository, defaultUserManagement)
	taskManagerImpl := tasks.ProvideDefaultTaskManager(mongoTaskRepository, defaultAdventurerManager)
	return taskManagerImpl
}

func authApiWireBuilder() *api.AuthAPI {
	engine := web.ProvideWebServer()
	mongoDatabase := database.ProvideDatasource()
	mongoUserRepository := security.ProvideMongoUserRepository(mongoDatabase)
	defaultUserManagement := security.ProvideDefaultUserManagement(mongoUserRepository)
	logger := server.ProvideLogger()
	errorHandler := server.ProvideErrorHandler(logger)
	authAPI := api.ProvideAuthAPI(engine, defaultUserManagement, errorHandler)
	return authAPI
}

// init_instances.go:

func Bootstrap() {

	loggerWireBuilder()

	databaseWireBuilder()
	webServerWireBuilder()

	userRepositoryWireBuilder()
	userManagementWireBuilder()

	adventurerRepositoryWireBuilder()
	adventurerManagerWireBuilder()

	taskRepositoryWireBuilder()
	taskManagerWireBuilder()

	authApiWireBuilder()
}
