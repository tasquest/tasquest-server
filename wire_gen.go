// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"go.mongodb.org/mongo-driver/mongo"
	"tasquest.com/server/api"
	"tasquest.com/server/common/errorhandler"
	"tasquest.com/server/common/logs"
	"tasquest.com/server/domain/profiles"
	"tasquest.com/server/infra/database"
	"tasquest.com/server/infra/web"
	"tasquest.com/server/security"
)

// Injectors from init_instances.go:

func loggerWireBuilder() *logrus.Logger {
	logger := logs.ProvideLogger()
	return logger
}

func databaseWireBuilder() *mongo.Client {
	client := database.ProvideDatasource()
	return client
}

func webServerWireBuilder() *gin.Engine {
	engine := web.ProvideWebServer()
	return engine
}

func userRepositoryWireBuilder() security.UserRepository {
	client := database.ProvideDatasource()
	mongoUserRepository := security.ProvideMongoUserRepository(client)
	return mongoUserRepository
}

func userManagementWireBuilder() security.UserManagement {
	client := database.ProvideDatasource()
	mongoUserRepository := security.ProvideMongoUserRepository(client)
	defaultUserManagement := security.ProvideDefaultUserManagement(mongoUserRepository)
	return defaultUserManagement
}

func profileRepositoryWireBuilder() profiles.ProfileRepository {
	client := database.ProvideDatasource()
	mongoProfileRepository := profiles.ProvideMongoProfileRepository(client)
	return mongoProfileRepository
}

func profileManagerWireBuilder() profiles.ProfileManager {
	client := database.ProvideDatasource()
	mongoProfileRepository := profiles.ProvideMongoProfileRepository(client)
	mongoUserRepository := security.ProvideMongoUserRepository(client)
	defaultUserManagement := security.ProvideDefaultUserManagement(mongoUserRepository)
	defaultProfileManager := profiles.ProvideDefaultProfileManager(mongoProfileRepository, defaultUserManagement)
	return defaultProfileManager
}

func authApiWireBuilder() *api.AuthAPI {
	engine := web.ProvideWebServer()
	client := database.ProvideDatasource()
	mongoUserRepository := security.ProvideMongoUserRepository(client)
	defaultUserManagement := security.ProvideDefaultUserManagement(mongoUserRepository)
	logger := logs.ProvideLogger()
	errorHandler := errorhandler.ProvideErrorHandler(logger)
	authAPI := api.ProvideAuthAPI(engine, defaultUserManagement, errorHandler)
	return authAPI
}

// init_instances.go:

func Bootstrap() {

	loggerWireBuilder()

	databaseWireBuilder()
	webServerWireBuilder()

	userRepositoryWireBuilder()
	userManagementWireBuilder()

	profileRepositoryWireBuilder()
	profileManagerWireBuilder()

	authApiWireBuilder()
}
